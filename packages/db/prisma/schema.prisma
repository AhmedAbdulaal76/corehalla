generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  // Cross Schema Foreign Keys
  // @relation auth.users.id -> auth_user_trigger_[add|rm].sql
  // see https://github.com/prisma/prisma/issues/1175#issuecomment-1100726897
  id          String           @id @db.Uuid
  username    String           @default("")
  avatarUrl   String           @default("")
  favorites   UserFavorite[]
  connections UserConnection[]
}

model UserFavorite {
  type   String
  id     String
  name   String
  meta   Json
  userId String      @db.Uuid
  user   UserProfile @relation(fields: [userId], references: [id])

  @@id([userId, type, id])
}

model UserConnection {
  userId   String      @db.Uuid
  type     String
  appId    String
  name     String
  verified Boolean
  public   Boolean     @default(false)
  user     UserProfile @relation(fields: [userId], references: [id])

  @@id([userId, type, appId])
}

model BHPlayerData {
  id               String           @id
  name             String
  lastUpdated      DateTime
  xp               Int
  level            Int
  tier             String
  games            Int
  wins             Int
  rating           Int
  peakRating       Int
  rankedGames      Int
  rankedWins       Int
  region           String
  damageDealt      Int
  damageTaken      Int
  kos              Int
  falls            Int
  suicides         Int
  teamKos          Int
  matchTime        Int
  damageUnarmed    Int
  koUnarmed        Int
  matchTimeUnarmed Int
  koThrownItem     Int
  damageThrownItem Int
  koGadgets        Int
  damageGadgets    Int
  legends          BHPlayerLegend[]
  weapons          BHPlayerWeapon[]
}

model BHPlayerLegend {
  player_id         String
  player            BHPlayerData @relation(fields: [player_id], references: [id])
  lastUpdated      DateTime
  legend_id         Int
  damageDealt       Int
  damageTaken       Int
  kos               Int
  falls             Int
  suicides          Int
  teamKos           Int
  matchTime         Int
  games             Int
  wins              Int
  damageUnarmed     Int
  damageThrownItem  Int
  damageWeaponOne   Int
  damageWeaponTwo   Int
  damageGadgets     Int
  koUnarmed         Int
  koThrownItem      Int
  koWeaponOne       Int
  koWeaponTwo       Int
  koGadgets         Int
  timeHeldWeaponOne Int
  timeHeldWeaponTwo Int
  xp                Int
  level             Int

  @@id([player_id, legend_id])
}

model BHPlayerWeapon {
  player_id   String
  player      BHPlayerData @relation(fields: [player_id], references: [id])
  lastUpdated      DateTime
  weapon_name String
  kos         Int
  matchTime   Int
  games       Int
  wins        Int
  damageDealt Int
  xp          Int
  level       Int

  @@id([player_id, weapon_name])
}

model BHPlayerAlias {
  playerId String
  alias    String

  @@id([playerId, alias])
}

model BHClan {
  id      String @id
  name    String
  created Int
  xp      Int
}

model CrawlProgress {
  id          String   @id
  name        String
  lastUpdated DateTime
  progress    Int
}
